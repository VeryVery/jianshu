# MVC和三层架构

### 系统概念
* 指整个应用系统程序大的结构，常见的如MVC和三层架构
    * 系统架构的出现，都是为了降低系统模块间的***耦合度***

### MVC
> View（视图）层：为用户提供使用界面，与用户直接进行交互。
> Model：模型，数据承载Bean（实体类）和业务处理Bean（指Service或Dao对象）。
> Controller：控制器，用于将用户请求转发给相应的Model进行处理，并处理Model的计算结果向用户提供相应响应。

* 用户通过View页面向服务端提出请求，可以是表单请求、超链接请求、AJAX请求等。
* 服务端Controller控制器接收到请求后对请求进行解析，找到相应 的Model对用户请求进行处理。
* Model处理后，将处理结果再交给Controller。
* Controller在接到处理结果后，根据处理结果找到要作为向客户端发回的响应View页面。页面经渲染（数据填充）


### 三层架构
> View（视图）层：用于接收用户提交请求的代码在这里编写。（跟用户发生关系的层，MVC中的V，C）
> Service（服务）层：系统的业务逻辑主要在这里编写。
> Dao层（持久）：直接操作数据库的代码在这里编写。

在三层架构中，为了降低各层间的耦合度，通过接口实现上层对下层的调用（抽象编程），下层对上层的真正服务提供者，是下层接口的实现类


### SSM
>SpringMVC：作为View层的实现者，完成用户的请求接收功能。SpringMVC的Controller作为整个应用的控制器，完成用户请求的转发及对用户的响应。
>MyBatis：作为 Dao层的实现者，完成对数据库的增、删、改、查功能。
>Spring：以整个应用大管家的身份出现。整个应用中所有的Bean的生命周期行为，均由Spring来管理。即整个应用中所有对象的创建、初始化、销毁，及对象间关联关系的维护，均由Spring进行管理。

